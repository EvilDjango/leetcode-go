// Oops, forgot to write comments. Good luck, bro.
//
// @author xuejunc deerhunter0837@gmail.com
// @create 9/16/21 9:43 PM
package smallest_k_lcci

import (
	"reflect"
	"sort"
	"testing"
)

func Test_smallestK(t *testing.T) {
	type args struct {
		arr []int
		k   int
	}
	tests := []struct {
		name string
		args args
	}{
		{
			"",
			args{[]int{1, 3, 5, 7, 2, 4, 6, 8}, 4},
		},
		{
			"",
			args{[]int{1, 3, 1, 5, 7, 2, 2, 4, 6, 8}, 4},
		},
		{
			"",
			args{[]int{1, 2, 3}, 0},
		},
		{
			"",
			args{[]int{-14850, 4457, 7, -2845, -91, -62041, 185, 3, -40380, 9, 8089, 11, -319, -370, 394, 0, 3, -563, 3, 13, 89, 1471, 3832, 27, -2, -15551, 60, -28331, -655, -9685, 190, 7454, 23649, -13386, -38, -1669, 41114, -2, -35533, 12908, -48, 630, 27480, 44135, 21, 3698, 5632, 22, -38186, -37, 6, -2, -41119, -53284, -5064, -513, -4749, 16963, -51288, 0, 42383, 2804, 6753, 793, -962, 83, -6105, -72, -8, -4, 9, 740, 47, -68, -8419, -9, 15463, 0, -4, -78, -57022, -7, -38, 0, -22987, 32, 6, 50, 9821, 6, -789, -15, -7528, -553, 11567, 7870, 3627, -522, -455, -7169, 55, 120, -826, -43, 1257, 2810, -24, 2, -7, 0, -8, -55, -5, -7374, -3, -32904, -8140, 29, -460, -9, 21607, 8, -4819, 44564, 48, -92, -9014, 8, 5, -37, -9358, -6537, 183, -81, 21, 0, -298, -9877, -670, -6, -19, 97, -1923, 889, -38777, -10657, -1838, -6, 9, -8, -279, -2, -55950, -82, -696, -6, 51, 7440, 52096, -48555, -501, 4, -497, 4, -1, 69, 15, 1, 9, -4, 54, 6, -78, -55, 61863, 642, 0, 7, 0, -29988, 7278, 49, 42865, -992, 6, -216, 877, 735, 24612, -71, -62, 8208, -154, 30886, 39, -6685, 7, 8925, -62397, 3, 7636, 7, -37, -957, -864, 59468, -3, 9781, 117, 43, -6, 870, 0, -686, -6620, -5519, -14917, -88, -891, 1, 89, -38789, 7528, 6, -23608, 9089, -3703, -93, 61030, 400, -942, -3185, -633, 45, -614, -5899, -47, -252, -8240, 59, 9, -152, 6, -51035, -11, -89, 38478, 15483, -119, -2, 64389, 5739, 0, 9870, -5716, -3, 8977, 43512, -915, -40, -6, 42, -133, -2, -8122, 4, -3876, 23683, 6, -42982, -6, 4, 55666, -2, 47143, 61, -8, 62296, -6, 30, -9, -45678, -296, -5053, 26893, -470, 52002, 78, -3, 51, 93, -24361, 363, 484, -2, -5937, 6833, -386, -3501, 59, 4, -4410, -141, 963, -42466, -7940, -57199, -65, 198, -53, -38141, 6, 4294, -98, 3832, 89, -430, -58, 22073, 23004, -25, 10856, 392, 4, 18, -37396, 19, -87, -60, 87, 4977, 2, 88, 27008, 34390, -640, -94, 4616, 48602, -8022, -66, 785, 0, 40367, -7114, 68, -41276, 23635, -24442, 1, 9389, 604, 4342, -864, -23812, -7, 4997, 74, 3669, -42503, -662, -9, 4891, 51093, -92, -2, 67, -42, 8, -6, 315, 36827, 4238, -35, 588, 46, 10670, 30669, 52630, 9859, 3298, -50, -4121, -2407, -110, -84, 954, -7, 816, 852, 440, 0, -86, 830, -916, 3, -62, -927, 6, -808, -39, 27300, -2, 54, 65418, 52211, 61, -55531, 26, 55115, -14, 460, 99, -7, 6069, -7980, -6731, -4041, 4, 7, -1, 3, 7364, -65348, 37, -5, 1, -52, -6, 33, 979, -2298, 4582, -4, -7035, 9464, -62, -58316, 809, 6395, -48, -34, 50372, -84, -1, 17316, 39634, 8060, -73, -29120, -9, 97, 8975, -57397, 44122, 3, 5, -77, 37196, 10, 44910, 80, -2, -56, -22, 6826, -14072, -5, -791, -912, 5827, 55038, 6, 25, 70, 53, -392, 9346, 7168, -1, 39449, -934, -92, 8586, 73, -374, 6767, 57350, -98, -4522, -2, 7120, 8, 9, -45621, -408, -12, -6653, 976, -308, -41051, -37224, -988, -1, 5706, 30985, -30, 62, 7522, 19, -69, -47, -108, -25, -856, 2002, -2, 2817, -762, -136, -1515, 672, -867, -46, 63531, 2, -6293, -3743, 4, 51803, -9835, -9, 1, -2464, 55, -8734, 11, -8713, 9438, -8414, 0, 54, -7, -9, -3, -30, -3, 48231, -8557, -6965, 96, -2, 93, 27, 3261, -9297, -7948, -5589, 95, -1576, 61289, 4564, 8246, 825, -46, 256}, 402},
		},
		{
			"",
			args{[]int{29234, 28, 940, -48, 20347, 42, -8047, -38796, -6, -43, 6, 5, 18200, -948, 7571, 15848, 1122, -30790, -40, 8845, -6520, 16, -52289, 75, -405, 34354, 2392, -43682, -29, 4565, -7448, 9438, 57834, -15924, 4, 88, -4948, 7508, 548, 41979, -6, -4, 58, -77, 11378, -25875, -32, 79, -418, -3752, 7880, -83, 46, 1, 29425, -8, -62787, -9241, 31213, -7, -412, -901, -6, 81, 750, -9469, 819, 9699, 638, -7977, 981, -5057, 6, 5427, 9, -370, 29901, -5249, 69, 622, 37695, -168, 2, -6, 29949, 23612, 375, -8, 9380, -48, 724, 7548, -5252, 43, -9, 542, 294, -84, 57726, -27169, 20651, -66, -869, 24, 169, -60, 2637, 0, 97, -9659, -778, 9, -3, -73, 3762, -46, -48006, -67, 608, 20, 0, -492, 61, 13, 3378, -34870, -20, 114, 13987, 4, 2491, 7, 803, -7384, 366, 17, 538, -660, -23065, 4, 281, 17, 1735, -8, 34264, 141, -12174, -60, -8, -4, 4, -1952, 852, -913, 4, 5020, -446, 41532, -93, 46611, 861, -57, 31248, 6658, 14250, -934, -5887, -379, 42837, 17986, -844, 686, -5581, -6966, 9, -16, 26509, -58932, -916, -6036, 32311, -2, 82, -2, 13283, -54650, -3, 9, 3, 38317, -34124, 325, 42349, -8408, -22374, -4, -11, 41921, -9356, -5, -3, 8, -624, -52273, -36963, -51285, 5946, 39109, 60627, 751, -1593, -7588, 1, -6, -5455, -6513, -2908, -248, 12, 476, -61521, -5225, -5483, -895, -72, 2497, 36, 13, -259, 6, -1, 13333, -37648, -1, -4, 71, 96, -3028, -798, -2903, -2, 56031, -76, -9793, 9925, -32091, 0, -157, 878, -75, 823, 3430, -299, 51289, 64686, -5426, -6010, -4512, -713, 53, 59736, -55493, 19793, 31365, -50, 6407, -27, 21, 21277, 82, -47196, 6368, 4, -3, -375, -1, 242, 888, -12688, 1, 424, 642, 131, -61, -22, -108, 5, -27765, -9, -37441, -324, 18724, 43326, 40, 5497, -651, -27153, 61, -170, 46404, -30193, 29, 19301, -6496, 263, -8204, 9, 402, 10635, -2657, -6, -479, 8569, 7, 0, -19147, -27753, 5016, -8, 24, -532, 773, -38499, -6877, 551, 44012, 5, -21285, 875, -11419, 59, 4732, -52, -96, -7054, -65, 9880, -41999, 29, 7793, 1, -7177, 29, -119, -4741, 8, 3603, 778, 8, 58, -24212, 15, 55260, -60, 9, 2469, 1736, 0, -5555, 86, -56368, -51713, -62628, -20985, -4288, 468, -680, 89, 444, -361, -493, 40655, -26, 35, 45229, 38129, -19122, 4208, 2, -6, 3252, 45805, 58, -307, 867, 48, -603, -8, 69, 919, -34420, 733, 5, 90, 6, -74, -3, -18778, 1, -34775, 50211, 138, 42955, -5484, -5456, 2, -11040, 7, -9825, 22, -6, 32, -35218, -39, 59620, -153, 9, -46, 9, 35971, -9384, -5389, -1804, -6, -59082, -86, -9, 7406, 48124, 9, -5, 868, 696, -2372, 612, -51, 28, -17070, -987, -449, 34149, -3, 5650, -2, 2364, -664, 36, -839, -8, 79, -30673, 980, -7, 0, 3683, -56010, 35, 9, 43176, 569, -5, -729, 91, 7, 42, 3, 63548, 8, -66, -72, 501, 86, -97, -37934, -123, -1, -32518, 6, -62705, -46937, -54596, 40878, -791, -60131, -45370, 417, 59635, -8496, -75, -99, 812, 8165, 5, 869, 487, -446, 61573, -20, 1, -519, 13, -59141, -400, -9624, -3, 87, 25778, -60, 89, -861, -4, 3799, -5, -32406, 718, -52324, -53428, -1185, 7, -24455, 7106, 1, 47, 3, 6, 0, -8, 903, 10576, -4278, -695, 33, 1979, -55911, -5, 2961, 22127, 37, 48, 5, 7, -15, 159, 4280, 25, 16, -3, -639, -14, -51, -565, -2464, -72, 87, -19, -645, -872, -8476, -423, 9376, -230, 48, 56622, 68, 30, 26638, -760, -45, -179, -80, 2760, 170, 9758, -3, -619, -51093, 769, 58, 728, -3, -676, 56, 47, 22, -57, 30, -4, -9384, -75, 65, 310, 27, -2, 288, 184, -21, -87, 83, -50, 12372, -611, 72, -30895, 30824, -6537, 4, 119, -331, -954, -599, 4, 149, 8055, -465, -28435, 51, -196, 634, 8360, 4979, 20, -8, -41736, 62107, -56414, -1216, -57478, -85, -5, -4891, -7, 30, -1738, 32098, -42139, 9, -13892, 75, 8633, 368, 52, -89, -80, -8503, -76, 65224, 789, 5, 7226, -38807, -38990, 16, -1, -66, -70, 48900, -22708, -7385, 894, 27909, 8, 8, -6226, 863, -1881, -519, 619, -61, -58558, -19761, 54, 22681, 68, -1, 7, -673, 507, -8980, -858, -35360, 278, -3944, 68, -18086, -943, -51647, -30958, -596, 24295, 78, 26077, 734, 529, -468, -49012, 46, -506, -11, 718, -18, -4338, 6, -195, 24, -247, -6333, 34, 78, -25, 44217, -3192, -62018, 18984, 897, -40, 42028, -2, 19356, 825, -858, -6, -8, 40, 4, 939, 1, 6437, -9564, -246, -763, -7740, 662, 18, 40, -95, 8221, 2, -6, 3175, -524, 58987, 39784, 33858, 220, 6, 5, 46, -1438, -9, 7, -78, -45710, -76, -6197, 1, -50038, -1, 3, 15734, 38300, -4, -14051, -29544, 9, -735, -4586, -893, 9749, 626, -8463, 48660, -622, -7527, 49, -2, -5, -908, 23, -1622, -6336, 11, 737, 5641, 842, 36308, -5, -9, 32527, 31, 17623, -8, 30, 37, -33126, 729, 691, -9, 0, -28503, 8151, 37, -7791, 623, 38, 5, 6273, 42, 34997, -1030, -368, -26, -6, 11592, 73, -818, -76, 3, 2899, -6873, 7911, -3318, -17, 8045, -86, -7918, 64387, 901, -56805, 8, -565, 4, -6, 7, -35648, 75, -2013, 15507, 7, 725, 887, 1, -30100, -192, -33433, -90, -26378, 25248, -49, -31152, -10314, 994, 40, -4, 27}, 834},
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got := smallestK(tt.args.arr, tt.args.k)
			sort.Ints(got)
			copied := make([]int, len(tt.args.arr))
			copy(copied, tt.args.arr)
			sort.Ints(copied)
			want := copied[:tt.args.k]
			if !reflect.DeepEqual(got, want) {
				t.Errorf("\nactual: %v,\n want:   %v", got, want)
			}
		})
	}
}
